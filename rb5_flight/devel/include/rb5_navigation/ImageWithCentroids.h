// Generated by gencpp from file rb5_navigation/ImageWithCentroids.msg
// DO NOT EDIT!


#ifndef RB5_NAVIGATION_MESSAGE_IMAGEWITHCENTROIDS_H
#define RB5_NAVIGATION_MESSAGE_IMAGEWITHCENTROIDS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/Image.h>
#include <geometry_msgs/Point.h>

namespace rb5_navigation
{
template <class ContainerAllocator>
struct ImageWithCentroids_
{
  typedef ImageWithCentroids_<ContainerAllocator> Type;

  ImageWithCentroids_()
    : header()
    , image()
    , centroids()
    , class_labels()
    , confidence_scores()
    , object_ids()  {
    }
  ImageWithCentroids_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , image(_alloc)
    , centroids(_alloc)
    , class_labels(_alloc)
    , confidence_scores(_alloc)
    , object_ids(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _image_type;
  _image_type image;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _centroids_type;
  _centroids_type centroids;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _class_labels_type;
  _class_labels_type class_labels;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _confidence_scores_type;
  _confidence_scores_type confidence_scores;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _object_ids_type;
  _object_ids_type object_ids;





  typedef boost::shared_ptr< ::rb5_navigation::ImageWithCentroids_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rb5_navigation::ImageWithCentroids_<ContainerAllocator> const> ConstPtr;

}; // struct ImageWithCentroids_

typedef ::rb5_navigation::ImageWithCentroids_<std::allocator<void> > ImageWithCentroids;

typedef boost::shared_ptr< ::rb5_navigation::ImageWithCentroids > ImageWithCentroidsPtr;
typedef boost::shared_ptr< ::rb5_navigation::ImageWithCentroids const> ImageWithCentroidsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rb5_navigation::ImageWithCentroids_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rb5_navigation::ImageWithCentroids_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rb5_navigation::ImageWithCentroids_<ContainerAllocator1> & lhs, const ::rb5_navigation::ImageWithCentroids_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.image == rhs.image &&
    lhs.centroids == rhs.centroids &&
    lhs.class_labels == rhs.class_labels &&
    lhs.confidence_scores == rhs.confidence_scores &&
    lhs.object_ids == rhs.object_ids;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rb5_navigation::ImageWithCentroids_<ContainerAllocator1> & lhs, const ::rb5_navigation::ImageWithCentroids_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rb5_navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rb5_navigation::ImageWithCentroids_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rb5_navigation::ImageWithCentroids_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rb5_navigation::ImageWithCentroids_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rb5_navigation::ImageWithCentroids_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rb5_navigation::ImageWithCentroids_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rb5_navigation::ImageWithCentroids_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rb5_navigation::ImageWithCentroids_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1bdd093e7970e7ba29f28db175e0d31f";
  }

  static const char* value(const ::rb5_navigation::ImageWithCentroids_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1bdd093e7970e7baULL;
  static const uint64_t static_value2 = 0x29f28db175e0d31fULL;
};

template<class ContainerAllocator>
struct DataType< ::rb5_navigation::ImageWithCentroids_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rb5_navigation/ImageWithCentroids";
  }

  static const char* value(const ::rb5_navigation::ImageWithCentroids_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rb5_navigation::ImageWithCentroids_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header                        # Includes a timestamp and frame ID\n"
"\n"
"sensor_msgs/Image image              # The image frame\n"
"\n"
"geometry_msgs/Point[] centroids      # List of centroids\n"
"string[] class_labels                # Class labels (e.g., 'person', 'car')\n"
"float32[] confidence_scores          # Confidence scores for each detected object\n"
"int32[] object_ids                   # Unique object IDs for tracking (optional)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::rb5_navigation::ImageWithCentroids_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rb5_navigation::ImageWithCentroids_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.image);
      stream.next(m.centroids);
      stream.next(m.class_labels);
      stream.next(m.confidence_scores);
      stream.next(m.object_ids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImageWithCentroids_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rb5_navigation::ImageWithCentroids_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rb5_navigation::ImageWithCentroids_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "image: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.image);
    s << indent << "centroids[]" << std::endl;
    for (size_t i = 0; i < v.centroids.size(); ++i)
    {
      s << indent << "  centroids[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.centroids[i]);
    }
    s << indent << "class_labels[]" << std::endl;
    for (size_t i = 0; i < v.class_labels.size(); ++i)
    {
      s << indent << "  class_labels[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.class_labels[i]);
    }
    s << indent << "confidence_scores[]" << std::endl;
    for (size_t i = 0; i < v.confidence_scores.size(); ++i)
    {
      s << indent << "  confidence_scores[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.confidence_scores[i]);
    }
    s << indent << "object_ids[]" << std::endl;
    for (size_t i = 0; i < v.object_ids.size(); ++i)
    {
      s << indent << "  object_ids[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.object_ids[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RB5_NAVIGATION_MESSAGE_IMAGEWITHCENTROIDS_H
